(Project.config "generate-only" true)

(load-and-use SDL)

(system-include "emscripten.h")

(defmodule Emscripten
  (private main-loop-arg-internal)
  (hidden main-loop-arg-internal)
  (register main-loop-arg-internal (Fn [(Ptr ()) (Ptr ()) Int Bool] ())
                                   "emscripten_set_main_loop_arg")

  (sig set-main-loop (Fn [(Ref (Fn [] ())) Int Bool] ()))
  (defn set-main-loop [callback fps simulate-infinite-loop]
    (main-loop-arg-internal (Function.unsafe-ptr callback)
                            (Function.unsafe-env-ptr callback)
                            fps
                            simulate-infinite-loop)))

(deftype (SDLContext a) [app SDLApp state a])

(defn tick [state]
  (+ state 10))

(defn draw [app rend state]
  (bg rend &(rgb (/ @state 2) (/ @state 3) (/ @state 4))))

(defn main-loop [context]
  (let-do [last-t (get-ticks)
           app (SDLContext.app context)
           rend (SDLApp.renderer app)
           target-dt (/ 1000 @(SDLApp.fps app))]
    (SDLContext.set-state! context (SDLApp.reduce-events app &SDLApp.quit-on-esc @(SDLContext.state context)))
    (SDLContext.set-state! context (tick @(SDLContext.state context)))
    (let-do [dt (- (get-ticks) last-t)
             time-left (- target-dt dt)]
      (when (pos? time-left)
        (delay time-left)))
    (draw app @rend (SDLContext.state context))
    (render-present @rend)))

(defn main []
  (let-do [app      (SDLApp.create "The Minimalistic Color Generator" 400 300)
           renderer @(SDLApp.renderer &app)
           _        (SDLApp.set-renderer! &app renderer)
           context  &(SDLContext.init app 0)]
    (println* "Hello WASI")
    (Emscripten.set-main-loop &(fn [] (main-loop context)) 0 true)))

