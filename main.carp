(Project.config "generate-only" true)

(load-and-use SDL)

(system-include "emscripten.h")

(defmodule Emscripten
  (private main-loop-arg-internal)
  (hidden main-loop-arg-internal)
  (register main-loop-arg-internal (Fn [(Ptr ()) (Ptr ()) Int Bool] ())
                                   "emscripten_set_main_loop_arg")

  (sig set-main-loop (Fn [(Ref (Fn [] ())) Int Bool] ()))
  (defn set-main-loop [callback fps simulate-infinite-loop]
    (main-loop-arg-internal (Function.unsafe-ptr callback)
                            (Function.unsafe-env-ptr callback)
                            fps
                            simulate-infinite-loop)))

(deftype (SDLCtx a) [last-ticks Int state a])

(defmodule SDLApp
  (defn run-with-callbacks-emscripten [app event-fn update-fn draw-fn initial-state]
    (let [rend @(SDLApp.renderer app)
          target-dt (/ 1000 @(SDLApp.fps app))
          ctx &(SDLCtx.init (SDL.get-ticks) initial-state)
          main-loop
          (fn []
           (let-do [state @(SDLCtx.state ctx)]
             (set! state (reduce-events app &event-fn state))
             (set! state (update-fn state))
             (let-do [dt (- (SDL.get-ticks) @(SDLCtx.last-ticks ctx))
                      time-left (- target-dt dt)]
               (when (pos? time-left)
                 (SDL.delay time-left)))
             (SDLCtx.set-last-ticks! ctx (SDL.get-ticks))
             (draw-fn app rend &state)
             (SDL.render-present rend)
             (SDLCtx.set-state! ctx state)))]
      (Emscripten.set-main-loop &main-loop 0 true))))

(defn tick [state]
  (+ state 10))

(defn draw [app rend state]
  (bg rend &(rgb (/ @state 2) (/ @state 3) (/ @state 4))))

(defn main []
  (let [app (SDLApp.create "The Minimalistic Color Generator" 400 300)
        state 0]
    (SDLApp.run-with-callbacks-emscripten &app SDLApp.quit-on-esc tick draw state)))

